import SwiftUI

struct NewTrainProgressView: View {
  
  let trainInfo: TrainInfo
  let targetStation: StationInfo
  let directionStationID: String
  let networkManager = NetworkManager()
  let randomString = ["ÏòÅÏ∞®Ïó¥Ï∞®!üê¢", "Ïã†ÎÇòÎäî ÌïòÎ£®!ü•∞", "ÌååÏù¥ÌåÖüí™", "Í±∑Í∏∞ Ï¢ãÏùÄÎÇ†üö∂‚Äç‚ôÇÔ∏è", "üé∂ÎààÎàÑÎÇúÎÇò", "üèùÎñ†ÎÇòÍ≥† Ïã∂Ïñ¥", "üöÄÎ°úÏºìÏ≤òÎüº Í∞àÍ≤å", "Î∞òÏßùÏù¥Îäî ÌïòÎ£®üí°", "üéäÎÇòÎ•º ÏúÑÌïú ÎÇ†", "üí§Ï°∏Î†§...", "ÏïÑÎ©îÎ¶¨Ïπ¥ÎÖ∏~‚òïÔ∏è", "ü§ñÏ¶êÍ≤ÅÏäµÎãàÍπåÌú¥Î®º?", "üëÄÏó¥Ï∞®Ïñ∏Ï†úÏôÄ~!!", "ÍµêÌÜµÏïΩÏûêÏö∞ÏÑ†üßë‚Äçü¶Ω", "ÌûòÎÇ¥Í≤åü¶Ä", "ü¶ûÍ∞ÄÏû¨ÎäîÎÇ¥Ìé∏", "üêùÏô±~", "üêÑÌûòÎÇ¥ÏÜå", "üêàÌûòÎìúÎÉ•", "üêÅÏû¨Î∞åÏ•ê?"].randomElement()!
  
  private let movingTimer = Timer.publish(every: 1, on: .main, in: .common).autoconnect()
  private let refreshingTimer = Timer.publish(every: 10, on: .main, in: .common).autoconnect()

  /// Ïó¥Ï∞® ÎèÑÏ∞©ÍπåÏßÄ ÎÇ®ÏùÄ ÏãúÍ∞Ñ(Ï¥à) - 1Ï¥àÏî© ÍπéÏù¥Îäî Ïã§Ï†ú eta ÏûÖÎãàÎã§.
  @State private var eta: Int
  /// 0Ïù¥ ÏãúÏûë, 100Ïù¥ ÎÅù
  @State private var remainDistance: CGFloat
  /// Ï¥àÎãπ ÏõÄÏßÅÏù¥Îäî Í±∞Î¶¨
  @State private var distancePerTic: CGFloat
  
  init(trainInfo: TrainInfo, targetStation: StationInfo, directionStationID: String) {
    self.trainInfo = trainInfo
    self.targetStation = targetStation
    self.directionStationID = directionStationID
    self.eta = Int(trainInfo.eta)!
    self.remainDistance = CGFloat(Int(trainInfo.eta)!) / 300 * 100
    self.distancePerTic = 100 / 300
  }
  
  var body: some View {
    GeometryReader { proxy in
      let width = proxy.size.width - 15
      let xOffset = width * (1 - remainDistance / 100)
      
      Circle()
        .frame(width: 15, height: 15)
        .foregroundColor(.yellow)
        .offset(x: xOffset)
        .onReceive(refreshingTimer) { _ in
          fetch()
        }
        .onReceive(movingTimer) { _ in
          if eta >= 300 {
            remainDistance = 100
          }
          
          if eta > 0 {
            eta -= 1
          }
          
          if remainDistance < 1 {
            remainDistance = 0
          } else {
            remainDistance -= distancePerTic
          }
        }
        .overlay {
          if eta <= 300 {
            if eta == .zero {
              Text("ÎèÑÏ∞©")
                .font(.caption2)
                .foregroundColor(.white)
                .offset(x: xOffset, y: +20)
                .frame(width: 100)
            } else if eta < 30 {
              Text("Í≥ß ÎèÑÏ∞©")
                .font(.caption2)
                .foregroundColor(.white)
                .offset(x: xOffset, y: +20)
                .frame(width: 100)
            } else {
              Text(eta.asClock)
                .font(.caption2)
                .foregroundColor(.white)
                .offset(x: xOffset, y: +20)
                .frame(width: 100)
            }
          }
        }
        .overlay {
          if eta <= 300 {
            Text(randomString)
              .font(.system(size: 9))
              .foregroundColor(.white)
              .offset(x: xOffset, y: -20)
              .frame(width: 100)
          }
        }
        .opacity(eta <= 300 ? 1 : 0)
    }
    .onAppear {
      fetch()
    }
  }
  
  private func fetch() {
    Task {
      guard let newTrainInfo = await networkManager.fetch(targetStation: targetStation, directionStationID: directionStationID).filter({ $0.id == trainInfo.id }).first else { return }
      
      // Îã§Ïùå Ïó≠ÏùÑ Í∏∞Ï§ÄÏúºÎ°ú fetch ÌñàÎãà?
      if newTrainInfo.previousStationID == targetStation.stationID {
        if newTrainInfo.arrivalState == .departed
            || newTrainInfo.arrivalState == .arrived
            || newTrainInfo.arrivalState == .approaching
            || newTrainInfo.arrivalState == .previousDeparted{
          return
        } else {
          eta = 0
          remainDistance = 0
        }
      }
      
      if eta >= 30 {
        eta = Int(newTrainInfo.eta)!
        distancePerTic = remainDistance / CGFloat(eta)
      }
    }
  }
}

struct NewTrainProgressView_Previews: PreviewProvider {
  static var previews: some View {
    
    let gangNam = StationInfo.findStationInfo(from: "1002000222")
    let mock = TrainInfo(
      subwayLineID: "1002",
      trainDestination: "ÏÑ±ÏàòÌñâ - Ïó≠ÏÇºÎ∞©Î©¥",
      previousStationID: "1002000223",
      nextStationID: "1002000221",
      stationID: "1002000222",
      stationName: "Í∞ïÎÇ®",
      trainType: TrainType.normal,
      eta: "0",
      terminusStationID: "88",
      terminusStationName: "ÏÑ±Ïàò",
      createdAt: "2022-11-19 16:12:40.0",
      firstMessage: "Ï†ÑÏó≠ ÎèÑÏ∞©",
      secondMessage: "ÍµêÎåÄ",
      arrivalState: TrainInfo.ArrivalState.previousArrived,
      id: "3245")
    
    NewTrainProgressView(trainInfo: mock, targetStation: gangNam, directionStationID: "1002000221")
  }
}
